### CRIBBED FROM geeksforgeeks.org

# Python program for implementation of Radix Sort 
# A function to do counting sort of arr[] according to 
# the digit represented by exp. 

def countingSort(arr, exp1): 

	n = len(arr) 

	# The output array elements that will have sorted arr 
	output = [0] * (n) 

	# initialize count array as 0 
	count = [0] * (10) 

	# Store count of occurrences in count[] 
	for i in range(0, n): 
		index = (arr[i] / exp1) 
		count[int(index % 10)] += 1

	# Change count[i] so that count[i] now contains actual 
	# position of this digit in output array 
	for i in range(1, 10): 
		count[i] += count[i - 1] 

	# Build the output array 
	i = n - 1
	while i >= 0: 
		index = (arr[i] / exp1) 
		output[count[int(index % 10)] - 1] = arr[i] 
		count[int(index % 10)] -= 1
		i -= 1

	# Copying the output array to arr[], 
	# so that arr now contains sorted numbers 
	i = 0
	for i in range(0, len(arr)): 
		arr[i] = output[i] 

# Method to do Radix Sort 
def radixSort(arr): 

	# Find the maximum number to know number of digits 
	max1 = max(arr) 

	# Do counting sort for every digit. Note that instead 
	# of passing digit number, exp is passed. exp is 10^i 
	# where i is current digit number 
	exp = 1
	while max1 / exp > 0: 
		countingSort(arr, exp) 
		exp *= 10
#######

## BEGIN ORIGINAL SHIT

                
def product_of_sum_to_2020(l):
    # O(n log n)
    l.sort()

    # O(n)
    # radixSort(l)

    # Initialize d: map of values to frequencies
    d = {}
    for e in l:
        if e in d.keys():
            d[e] += 1
        else:
            d[e] = 1

    start_i = 0
    end_i = len(l) - 1
    while (start_i != end_i):
        start = l[start_i]
        end = l[end_i]
        partial_sum = start + end
        desideratum = 2020 - partial_sum
        # Start by excluding start and end from d
        
        d[start] -= 1
        d[end] -= 1

        if (desideratum in d.keys()) and (d[desideratum] > 0):
            return start * end * desideratum

        start_diff = l[start_i + 1] - start
        end_diff = end - l[end_i - 1]

        if start_diff <= end_diff:
            start_i += 1
        else:
            end_i -= 1

        # Reintroduce start and end from d
        # to restore invariant for next iteration
        d[start] += 1
        d[end] += 1

l = []
with open('input') as f:
    for line in f:
       l.append(int(line))

print(product_of_sum_to_2020(l))
